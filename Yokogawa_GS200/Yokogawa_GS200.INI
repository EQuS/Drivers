# Instrument driver configuration file.

[General settings]

# The name is shown in all the configuration windows
name: Yokogawa GS200 DC Source

# The version string should be updated whenever changes are made to this config file
version: 0.2

# Name of folder containing the code defining a custom driver. Do not define this item
# or leave it blank for any standard driver based on the built-in VISA interface.
driver_path: Yokogawa_GS200



[Model and options]
# The option section allow instruments with different options to use the same driver

# Check instrument model id at startup (True or False). Default is False
check_model: True

# List of models supported by this driver
model_str_1: GS210

# Valid model strings returned by the instrument. Default value = model_str
model_id_1: GS210


# General VISA settings for the instrument.
[VISA settings]

# Enable or disable communication over the VISA protocol (True or False)
# If False, the driver will not perform any operations (unless there is a custom driver).
use_visa = True

# Reset the interface (not the instrument) at startup (True or False).  Default is False
reset: True

# Time (in seconds) before the timing out while waiting for an instrument response. Default is 5
timeout: 2

# Query instrument errors (True or False).  If True, every command sent to the device will
# be followed by an error query.  This is useful when testing new setups, but may degrade
# performance by slowing down the instrument communication. 
#query_instr_errors: True 

# Bit mask for checking status byte errors (default is 255, include all errors)
# The bits signal the following errors:
# 0: Operation
# 1: Request control
# 2: Query error
# 3: Device error
# 4: Execution error
# 5: Command error
# 6: User request
# 7: Power on
error_bit_mask: 255

# SCPI string to be used when querying for instrument error messages
error_cmd: STAT:ERR?

# Initialization commands are sent to the instrument when starting the driver
# *RST will reset the device, *CLS clears the interface
#init: *CLS

# Final commands sent to the instrument when closing the driver
final: 


# Define quantities in sections. This list is a selection of allowed keywords,
# see the manual for a full list of options
#   datatype:      The datatype should be one of DOUBLE, BOOLEAN, COMBO,
#                  STRING, COMPLEX, VECTOR, VECTOR_COMPLEX, PATH or BUTTON.
#   unit:          Quantity unit
#   set_cmd:       Command used to send data to the instrument. Put <*> where the value should appear.
#   get_cmd:       Command used to get the data from the instrument. Default is set_cmd?
#   def_value:     Default value
#   low_lim:       Lowest allowable value.  Defaults to -INF
#   high_lim:      Highest allowable values.  Defaults to +INF
#   combo_def_1:   First option in a pull-down combo box. Only used when datatype=COMBO
#   combo_def_2:   Second option in a pull-down combo box. Only used when datatype=COMBO
#   ...
#   combo_def_n:   nth option in a pull-down combo box. Only used when datatype=COMBO
#   state_quant:   Quantity that determines this control's visibility
#   state_value_1: Value of "state_quant" for which the control is visible
#   state_value_2: Value of "state_quant" for which the control is visible
#   ...
#   state_value_n: Value of "state_quant" for which the control is visible
#   permission:    Sets read/writability, options are BOTH, READ, WRITE or NONE. Default is BOTH 
#   group:         Name of the group where the control belongs.
#   section:       Name of the section where the control belongs.


[Output]
datatype: BOOLEAN
tooltip: Turn output on
show_in_measurement_dlg: False
def_value: True
permission: BOTH
group: Source

[Function]
datatype: COMBO
tooltip: Set source function
show_in_measurement_dlg: False
permission: BOTH
def_value: Voltage
combo_def_1: Voltage
combo_def_2: Current
group: Source

[Source Voltage Range]
datatype: DOUBLE
label: Voltage Range
tooltip: Set highest expected voltage level
unit: V
show_in_measurement_dlg: False
def_value: 10
low_lim: 10E-3
high_lim: 30
permission: BOTH
state_quant: Function
state_value_1: Voltage
group: Source

[Source Current Range]
datatype: DOUBLE
label: Current Range
tooltip: Set highest expected current level
unit: A
show_in_measurement_dlg: False
def_value: 200E-3
low_lim: 1E-3
high_lim: 200E-3
permission: BOTH
state_quant: Function
state_value_1: Current
group: Source

[Source Current Level]
datatype: DOUBLE
label: Source Current
tooltip: Doing small-scale sweeps requires appropriate range to be set
unit: A
show_in_measurement_dlg: True
permission: BOTH
sweep_cmd: in_python <sr>
state_quant: Function
state_value_1: Current
group: Source

[Source Voltage Level]
datatype: DOUBLE
label: Source Voltage
tooltip: Doing small-scale sweeps requires appropriate range to be set
unit: V
show_in_measurement_dlg: True
permission: BOTH
sweep_cmd: in_python <sr>
state_quant: Function
state_value_1: Voltage
group: Source
sweep_rate: 0.0
#sweep_rate_low: 0.002
sweep_rate_high: 0.03

[Measurement]
datatype: BOOLEAN
tooltip: Turn measurement on
show_in_measurement_dlg: False
def_value: False
permission: BOTH
group: Measurement
set_cmd: SENS <*>
get_cmd: SENS?

[Measurement NPLC]
datatype: DOUBLE
tooltip: Measurement speed in number of powerline cycles
def_value: 1
low_lim: 1
high_lim: 25
permission: BOTH
set_cmd: SENS:NPLC <*>
get_cmd: SENS:NPLC?
group: Measurement
show_in_measurement_dlg: False
state_quant: Measurement
state_value_1: True

[Measurement Variable]
datatype: DOUBLE
label: Measured value
permission: READ
get_cmd: READ?
group: Measurement
show_in_measurement_dlg: True
state_quant: Measurement
state_value_1: True